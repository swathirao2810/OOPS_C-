Transitive Closure of a Graph using DFS
Given a directed graph, find out if a vertex v is reachable from another vertex u for all vertex pairs (u, v) in the given graph. 
Here reachable mean that there is a path from vertex u to v. The reach-ability matrix is called transitive closure of a graph.
 In this post a O(V2) algorithm for the same is discussed.
https://www.geeksforgeeks.org/transitive-closure-of-a-graph-using-dfs/
Below are abstract steps of algorithm.

Create a matrix tc[V][V] that would finally have transitive closure of given graph. Initialize all entries of tc[][] as 0.
Call DFS for every node of graph to mark reachable vertices in tc[][]. In recursive calls to DFS, we donâ€™t call DFS for an adjacent vertex 
if it is already marked as reachable in tc[][].
Below is implementation of the above idea. The code uses adjacency list representation of input graph and builds a matrix tc[V][V] such 
that tc[u][v] would be true if v is reachable from u.

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

class Graph
{
    int V; //number of vertices
    list<int> *adj; //adjacency list
    bool **tc; //transitive closure matrix
    void DFSUtil(int s, int v);
  public: 
  Graph(int V); //constructor
  void addEdge(int s, int v) //add edge to adjacency list
  {
      adj[s].push_back(v);
  }
  
  void transitiveClosure();
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
    tc = new bool*[V];
    for(int i =0; i<V; i++)
    {
        tc[i] = new bool[V];
        memset(tc[i], false, V*sizeof(bool));
    }
}

// A recursive DFS traversal function that finds all reachable vertices for s.
void Graph::DFSUtil(int s, int v)
{
    tc[s][v] = true; //mark the node v as reachable from s
    list<int>::iterator it;
    //find all vertices reachable through v
    for(it =adj[v].begin();it!=adj[v].end();it++ )
    {
        if(tc[s][*it]== false)
            DFSUtil(s,*it);
    }
}

//function to create the transitive closure matrix of the graph and print it.
void Graph::transitiveClosure()
{
    for(int i=0; i<V; i++)
        DFSUtil(i,i); // every node is connected to itself as well
        
    for(int i=0; i<V;i++)
    {
        for(int j=0; j<V; j++)
        {
            cout<<tc[i][j]<<" ";
        }
        cout<<endl;
    }
}

int main()
{
    Graph g(4);
    g.addEdge(0,1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);
    g.transitiveClosure();
    return 0;
}

Output:
1 1 1 1 
1 1 1 1 
1 1 1 1 
0 0 0 1 
